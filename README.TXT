Project: naive-ticket-machine
Authors: David Barnes and Michael Kölling

This project is part of the material for the book

   Objects First with Java - A Practical Introduction using BlueJ
   Seventh edition
   David J. Barnes and Michael Kölling
   Pearson Education

It is discussed in chapter 2.

Purpose of project: To illustrate the basics of fields, constructors, and methods.
How to start this project: Create one or more TicketMachine objects.


******** Anwsers ********
Q5: There is no difference execpt for the price
Q:6 public class Ticket Machine { ... }
Q7: yes the change in the diagram is that the description became the wrapper for the code also it casues many issues in the source code
Q8: The errors in the source code are all around the public text written in other places in the code because it doesn't recognize it as the class holder anymore
Q9: you can indeed compile the file and run it without public without any errors in the code
Q10: The fields in the ticket machine are the int balance, int price, and the int total, int cost, the print ticket, the only constructor is the ticket machine
Q11: The parameters, and the print reducing balance to 0 even if there was spare change
Q12 I think the type of the fields are 
Q13: The names of the following fields are alive, tutor, game
Q15: Other ordering are not possible as they all end in errors because the coding language is specific
Q16: yes a semicolon is very much nessacary at the end of all field delcrations
Q18: Student is the class
Q19: one the paramete is the price
Q20: the names of the field will most likely be chapters, students, or teachers?
Q21: public Pet(String petsName)
{ private boolean pet; }
Q22: 
/** class Date
{ private boolean Date;
new int = new date }
Q23: The difference between both the body amd header's are the method name
Q24: What amount of money was inserted into the balace
Q25: The getBalance name cna be changed to get amount without any issues it will function the same way, which mean the name of the accessor and the name of the field just need to mean the same thing
Q27: The error message that appeares is when you try to compile is no statement
Q28: The header for get price has int while the header for print uses void
Q29: They do not have return statements because they do not return anthing to us because for insert you give money while with print it just creates a new ticket
Q31: /**
* Increase score by the given number of points.
*/
public void increaseScore(int points)
{
// TODO: Increase score by the value in points.
}
Q32: Yes it is a mutator because it changes the value within an object
Q33: * Reduce price by the given amount.
*/
public void discount(int amount)
{
// TODO: Subtract amount from price.
}
Q34: /** set age
/*
public int age()
{
currentAge = age int
}
Q35: 
public void is alive (boolean alive)
Q36: It changes the cost to price in the inspector
On question 39














